/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import type { CreateFileRoute, FileRoutesByPath } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as ResetCrossSigningRouteImport } from './routes/reset-cross-signing'
import { Route as AccountRouteImport } from './routes/_account'
import { Route as ResetCrossSigningIndexRouteImport } from './routes/reset-cross-signing.index'
import { Route as AccountIndexRouteImport } from './routes/_account.index'
import { Route as SessionsIdRouteImport } from './routes/sessions.$id'
import { Route as ResetCrossSigningSuccessRouteImport } from './routes/reset-cross-signing.success'
import { Route as ResetCrossSigningCancelledRouteImport } from './routes/reset-cross-signing.cancelled'
import { Route as DevicesSplatRouteImport } from './routes/devices.$'
import { Route as ClientsIdRouteImport } from './routes/clients.$id'
import { Route as PasswordRecoveryIndexRouteImport } from './routes/password.recovery.index'
import { Route as PasswordChangeIndexRouteImport } from './routes/password.change.index'
import { Route as AccountSessionsIndexRouteImport } from './routes/_account.sessions.index'
import { Route as AccountPlanIndexRouteImport } from './routes/_account.plan.index'
import { Route as PasswordChangeSuccessRouteImport } from './routes/password.change.success'
import { Route as EmailsIdVerifyRouteImport } from './routes/emails.$id.verify'
import { Route as EmailsIdInUseRouteImport } from './routes/emails.$id.in-use'
import { Route as AccountSessionsBrowsersRouteImport } from './routes/_account.sessions.browsers'

const ResetCrossSigningRoute = ResetCrossSigningRouteImport.update({
  id: '/reset-cross-signing',
  path: '/reset-cross-signing',
  getParentRoute: () => rootRouteImport,
} as any)
const AccountRoute = AccountRouteImport.update({
  id: '/_account',
  getParentRoute: () => rootRouteImport,
} as any)
const ResetCrossSigningIndexRoute = ResetCrossSigningIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ResetCrossSigningRoute,
} as any)
const AccountIndexRoute = AccountIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AccountRoute,
} as any)
const SessionsIdRoute = SessionsIdRouteImport.update({
  id: '/sessions/$id',
  path: '/sessions/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const ResetCrossSigningSuccessRoute =
  ResetCrossSigningSuccessRouteImport.update({
    id: '/success',
    path: '/success',
    getParentRoute: () => ResetCrossSigningRoute,
  } as any)
const ResetCrossSigningCancelledRoute =
  ResetCrossSigningCancelledRouteImport.update({
    id: '/cancelled',
    path: '/cancelled',
    getParentRoute: () => ResetCrossSigningRoute,
  } as any)
const DevicesSplatRoute = DevicesSplatRouteImport.update({
  id: '/devices/$',
  path: '/devices/$',
  getParentRoute: () => rootRouteImport,
} as any)
const ClientsIdRoute = ClientsIdRouteImport.update({
  id: '/clients/$id',
  path: '/clients/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const PasswordRecoveryIndexRoute = PasswordRecoveryIndexRouteImport.update({
  id: '/password/recovery/',
  path: '/password/recovery/',
  getParentRoute: () => rootRouteImport,
} as any)
const PasswordChangeIndexRoute = PasswordChangeIndexRouteImport.update({
  id: '/password/change/',
  path: '/password/change/',
  getParentRoute: () => rootRouteImport,
} as any)
const AccountSessionsIndexRoute = AccountSessionsIndexRouteImport.update({
  id: '/sessions/',
  path: '/sessions/',
  getParentRoute: () => AccountRoute,
} as any)
const AccountPlanIndexRoute = AccountPlanIndexRouteImport.update({
  id: '/plan/',
  path: '/plan/',
  getParentRoute: () => AccountRoute,
} as any)
const PasswordChangeSuccessRoute = PasswordChangeSuccessRouteImport.update({
  id: '/password/change/success',
  path: '/password/change/success',
  getParentRoute: () => rootRouteImport,
} as any)
const EmailsIdVerifyRoute = EmailsIdVerifyRouteImport.update({
  id: '/emails/$id/verify',
  path: '/emails/$id/verify',
  getParentRoute: () => rootRouteImport,
} as any)
const EmailsIdInUseRoute = EmailsIdInUseRouteImport.update({
  id: '/emails/$id/in-use',
  path: '/emails/$id/in-use',
  getParentRoute: () => rootRouteImport,
} as any)
const AccountSessionsBrowsersRoute = AccountSessionsBrowsersRouteImport.update({
  id: '/sessions/browsers',
  path: '/sessions/browsers',
  getParentRoute: () => AccountRoute,
} as any)

export interface FileRoutesByFullPath {
  '/reset-cross-signing': typeof ResetCrossSigningRouteWithChildren
  '/clients/$id': typeof ClientsIdRoute
  '/devices/$': typeof DevicesSplatRoute
  '/reset-cross-signing/cancelled': typeof ResetCrossSigningCancelledRoute
  '/reset-cross-signing/success': typeof ResetCrossSigningSuccessRoute
  '/sessions/$id': typeof SessionsIdRoute
  '/': typeof AccountIndexRoute
  '/reset-cross-signing/': typeof ResetCrossSigningIndexRoute
  '/sessions/browsers': typeof AccountSessionsBrowsersRoute
  '/emails/$id/in-use': typeof EmailsIdInUseRoute
  '/emails/$id/verify': typeof EmailsIdVerifyRoute
  '/password/change/success': typeof PasswordChangeSuccessRoute
  '/plan': typeof AccountPlanIndexRoute
  '/sessions': typeof AccountSessionsIndexRoute
  '/password/change': typeof PasswordChangeIndexRoute
  '/password/recovery': typeof PasswordRecoveryIndexRoute
}
export interface FileRoutesByTo {
  '/clients/$id': typeof ClientsIdRoute
  '/devices/$': typeof DevicesSplatRoute
  '/reset-cross-signing/cancelled': typeof ResetCrossSigningCancelledRoute
  '/reset-cross-signing/success': typeof ResetCrossSigningSuccessRoute
  '/sessions/$id': typeof SessionsIdRoute
  '/': typeof AccountIndexRoute
  '/reset-cross-signing': typeof ResetCrossSigningIndexRoute
  '/sessions/browsers': typeof AccountSessionsBrowsersRoute
  '/emails/$id/in-use': typeof EmailsIdInUseRoute
  '/emails/$id/verify': typeof EmailsIdVerifyRoute
  '/password/change/success': typeof PasswordChangeSuccessRoute
  '/plan': typeof AccountPlanIndexRoute
  '/sessions': typeof AccountSessionsIndexRoute
  '/password/change': typeof PasswordChangeIndexRoute
  '/password/recovery': typeof PasswordRecoveryIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_account': typeof AccountRouteWithChildren
  '/reset-cross-signing': typeof ResetCrossSigningRouteWithChildren
  '/clients/$id': typeof ClientsIdRoute
  '/devices/$': typeof DevicesSplatRoute
  '/reset-cross-signing/cancelled': typeof ResetCrossSigningCancelledRoute
  '/reset-cross-signing/success': typeof ResetCrossSigningSuccessRoute
  '/sessions/$id': typeof SessionsIdRoute
  '/_account/': typeof AccountIndexRoute
  '/reset-cross-signing/': typeof ResetCrossSigningIndexRoute
  '/_account/sessions/browsers': typeof AccountSessionsBrowsersRoute
  '/emails/$id/in-use': typeof EmailsIdInUseRoute
  '/emails/$id/verify': typeof EmailsIdVerifyRoute
  '/password/change/success': typeof PasswordChangeSuccessRoute
  '/_account/plan/': typeof AccountPlanIndexRoute
  '/_account/sessions/': typeof AccountSessionsIndexRoute
  '/password/change/': typeof PasswordChangeIndexRoute
  '/password/recovery/': typeof PasswordRecoveryIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/reset-cross-signing'
    | '/clients/$id'
    | '/devices/$'
    | '/reset-cross-signing/cancelled'
    | '/reset-cross-signing/success'
    | '/sessions/$id'
    | '/'
    | '/reset-cross-signing/'
    | '/sessions/browsers'
    | '/emails/$id/in-use'
    | '/emails/$id/verify'
    | '/password/change/success'
    | '/plan'
    | '/sessions'
    | '/password/change'
    | '/password/recovery'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/clients/$id'
    | '/devices/$'
    | '/reset-cross-signing/cancelled'
    | '/reset-cross-signing/success'
    | '/sessions/$id'
    | '/'
    | '/reset-cross-signing'
    | '/sessions/browsers'
    | '/emails/$id/in-use'
    | '/emails/$id/verify'
    | '/password/change/success'
    | '/plan'
    | '/sessions'
    | '/password/change'
    | '/password/recovery'
  id:
    | '__root__'
    | '/_account'
    | '/reset-cross-signing'
    | '/clients/$id'
    | '/devices/$'
    | '/reset-cross-signing/cancelled'
    | '/reset-cross-signing/success'
    | '/sessions/$id'
    | '/_account/'
    | '/reset-cross-signing/'
    | '/_account/sessions/browsers'
    | '/emails/$id/in-use'
    | '/emails/$id/verify'
    | '/password/change/success'
    | '/_account/plan/'
    | '/_account/sessions/'
    | '/password/change/'
    | '/password/recovery/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AccountRoute: typeof AccountRouteWithChildren
  ResetCrossSigningRoute: typeof ResetCrossSigningRouteWithChildren
  ClientsIdRoute: typeof ClientsIdRoute
  DevicesSplatRoute: typeof DevicesSplatRoute
  SessionsIdRoute: typeof SessionsIdRoute
  EmailsIdInUseRoute: typeof EmailsIdInUseRoute
  EmailsIdVerifyRoute: typeof EmailsIdVerifyRoute
  PasswordChangeSuccessRoute: typeof PasswordChangeSuccessRoute
  PasswordChangeIndexRoute: typeof PasswordChangeIndexRoute
  PasswordRecoveryIndexRoute: typeof PasswordRecoveryIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/reset-cross-signing': {
      id: '/reset-cross-signing'
      path: '/reset-cross-signing'
      fullPath: '/reset-cross-signing'
      preLoaderRoute: typeof ResetCrossSigningRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_account': {
      id: '/_account'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AccountRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/reset-cross-signing/': {
      id: '/reset-cross-signing/'
      path: '/'
      fullPath: '/reset-cross-signing/'
      preLoaderRoute: typeof ResetCrossSigningIndexRouteImport
      parentRoute: typeof ResetCrossSigningRoute
    }
    '/_account/': {
      id: '/_account/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AccountIndexRouteImport
      parentRoute: typeof AccountRoute
    }
    '/sessions/$id': {
      id: '/sessions/$id'
      path: '/sessions/$id'
      fullPath: '/sessions/$id'
      preLoaderRoute: typeof SessionsIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/reset-cross-signing/success': {
      id: '/reset-cross-signing/success'
      path: '/success'
      fullPath: '/reset-cross-signing/success'
      preLoaderRoute: typeof ResetCrossSigningSuccessRouteImport
      parentRoute: typeof ResetCrossSigningRoute
    }
    '/reset-cross-signing/cancelled': {
      id: '/reset-cross-signing/cancelled'
      path: '/cancelled'
      fullPath: '/reset-cross-signing/cancelled'
      preLoaderRoute: typeof ResetCrossSigningCancelledRouteImport
      parentRoute: typeof ResetCrossSigningRoute
    }
    '/devices/$': {
      id: '/devices/$'
      path: '/devices/$'
      fullPath: '/devices/$'
      preLoaderRoute: typeof DevicesSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/clients/$id': {
      id: '/clients/$id'
      path: '/clients/$id'
      fullPath: '/clients/$id'
      preLoaderRoute: typeof ClientsIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/password/recovery/': {
      id: '/password/recovery/'
      path: '/password/recovery'
      fullPath: '/password/recovery'
      preLoaderRoute: typeof PasswordRecoveryIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/password/change/': {
      id: '/password/change/'
      path: '/password/change'
      fullPath: '/password/change'
      preLoaderRoute: typeof PasswordChangeIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_account/sessions/': {
      id: '/_account/sessions/'
      path: '/sessions'
      fullPath: '/sessions'
      preLoaderRoute: typeof AccountSessionsIndexRouteImport
      parentRoute: typeof AccountRoute
    }
    '/_account/plan/': {
      id: '/_account/plan/'
      path: '/plan'
      fullPath: '/plan'
      preLoaderRoute: typeof AccountPlanIndexRouteImport
      parentRoute: typeof AccountRoute
    }
    '/password/change/success': {
      id: '/password/change/success'
      path: '/password/change/success'
      fullPath: '/password/change/success'
      preLoaderRoute: typeof PasswordChangeSuccessRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/emails/$id/verify': {
      id: '/emails/$id/verify'
      path: '/emails/$id/verify'
      fullPath: '/emails/$id/verify'
      preLoaderRoute: typeof EmailsIdVerifyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/emails/$id/in-use': {
      id: '/emails/$id/in-use'
      path: '/emails/$id/in-use'
      fullPath: '/emails/$id/in-use'
      preLoaderRoute: typeof EmailsIdInUseRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_account/sessions/browsers': {
      id: '/_account/sessions/browsers'
      path: '/sessions/browsers'
      fullPath: '/sessions/browsers'
      preLoaderRoute: typeof AccountSessionsBrowsersRouteImport
      parentRoute: typeof AccountRoute
    }
  }
}

declare module './routes/_account' {
  const createFileRoute: CreateFileRoute<
    '/_account',
    FileRoutesByPath['/_account']['parentRoute'],
    FileRoutesByPath['/_account']['id'],
    FileRoutesByPath['/_account']['path'],
    FileRoutesByPath['/_account']['fullPath']
  >
}
declare module './routes/reset-cross-signing' {
  const createFileRoute: CreateFileRoute<
    '/reset-cross-signing',
    FileRoutesByPath['/reset-cross-signing']['parentRoute'],
    FileRoutesByPath['/reset-cross-signing']['id'],
    FileRoutesByPath['/reset-cross-signing']['path'],
    FileRoutesByPath['/reset-cross-signing']['fullPath']
  >
}
declare module './routes/clients.$id' {
  const createFileRoute: CreateFileRoute<
    '/clients/$id',
    FileRoutesByPath['/clients/$id']['parentRoute'],
    FileRoutesByPath['/clients/$id']['id'],
    FileRoutesByPath['/clients/$id']['path'],
    FileRoutesByPath['/clients/$id']['fullPath']
  >
}
declare module './routes/devices.$' {
  const createFileRoute: CreateFileRoute<
    '/devices/$',
    FileRoutesByPath['/devices/$']['parentRoute'],
    FileRoutesByPath['/devices/$']['id'],
    FileRoutesByPath['/devices/$']['path'],
    FileRoutesByPath['/devices/$']['fullPath']
  >
}
declare module './routes/reset-cross-signing.cancelled' {
  const createFileRoute: CreateFileRoute<
    '/reset-cross-signing/cancelled',
    FileRoutesByPath['/reset-cross-signing/cancelled']['parentRoute'],
    FileRoutesByPath['/reset-cross-signing/cancelled']['id'],
    FileRoutesByPath['/reset-cross-signing/cancelled']['path'],
    FileRoutesByPath['/reset-cross-signing/cancelled']['fullPath']
  >
}
declare module './routes/reset-cross-signing.success' {
  const createFileRoute: CreateFileRoute<
    '/reset-cross-signing/success',
    FileRoutesByPath['/reset-cross-signing/success']['parentRoute'],
    FileRoutesByPath['/reset-cross-signing/success']['id'],
    FileRoutesByPath['/reset-cross-signing/success']['path'],
    FileRoutesByPath['/reset-cross-signing/success']['fullPath']
  >
}
declare module './routes/sessions.$id' {
  const createFileRoute: CreateFileRoute<
    '/sessions/$id',
    FileRoutesByPath['/sessions/$id']['parentRoute'],
    FileRoutesByPath['/sessions/$id']['id'],
    FileRoutesByPath['/sessions/$id']['path'],
    FileRoutesByPath['/sessions/$id']['fullPath']
  >
}
declare module './routes/_account.index' {
  const createFileRoute: CreateFileRoute<
    '/_account/',
    FileRoutesByPath['/_account/']['parentRoute'],
    FileRoutesByPath['/_account/']['id'],
    FileRoutesByPath['/_account/']['path'],
    FileRoutesByPath['/_account/']['fullPath']
  >
}
declare module './routes/reset-cross-signing.index' {
  const createFileRoute: CreateFileRoute<
    '/reset-cross-signing/',
    FileRoutesByPath['/reset-cross-signing/']['parentRoute'],
    FileRoutesByPath['/reset-cross-signing/']['id'],
    FileRoutesByPath['/reset-cross-signing/']['path'],
    FileRoutesByPath['/reset-cross-signing/']['fullPath']
  >
}
declare module './routes/_account.sessions.browsers' {
  const createFileRoute: CreateFileRoute<
    '/_account/sessions/browsers',
    FileRoutesByPath['/_account/sessions/browsers']['parentRoute'],
    FileRoutesByPath['/_account/sessions/browsers']['id'],
    FileRoutesByPath['/_account/sessions/browsers']['path'],
    FileRoutesByPath['/_account/sessions/browsers']['fullPath']
  >
}
declare module './routes/emails.$id.in-use' {
  const createFileRoute: CreateFileRoute<
    '/emails/$id/in-use',
    FileRoutesByPath['/emails/$id/in-use']['parentRoute'],
    FileRoutesByPath['/emails/$id/in-use']['id'],
    FileRoutesByPath['/emails/$id/in-use']['path'],
    FileRoutesByPath['/emails/$id/in-use']['fullPath']
  >
}
declare module './routes/emails.$id.verify' {
  const createFileRoute: CreateFileRoute<
    '/emails/$id/verify',
    FileRoutesByPath['/emails/$id/verify']['parentRoute'],
    FileRoutesByPath['/emails/$id/verify']['id'],
    FileRoutesByPath['/emails/$id/verify']['path'],
    FileRoutesByPath['/emails/$id/verify']['fullPath']
  >
}
declare module './routes/password.change.success' {
  const createFileRoute: CreateFileRoute<
    '/password/change/success',
    FileRoutesByPath['/password/change/success']['parentRoute'],
    FileRoutesByPath['/password/change/success']['id'],
    FileRoutesByPath['/password/change/success']['path'],
    FileRoutesByPath['/password/change/success']['fullPath']
  >
}
declare module './routes/_account.plan.index' {
  const createFileRoute: CreateFileRoute<
    '/_account/plan/',
    FileRoutesByPath['/_account/plan/']['parentRoute'],
    FileRoutesByPath['/_account/plan/']['id'],
    FileRoutesByPath['/_account/plan/']['path'],
    FileRoutesByPath['/_account/plan/']['fullPath']
  >
}
declare module './routes/_account.sessions.index' {
  const createFileRoute: CreateFileRoute<
    '/_account/sessions/',
    FileRoutesByPath['/_account/sessions/']['parentRoute'],
    FileRoutesByPath['/_account/sessions/']['id'],
    FileRoutesByPath['/_account/sessions/']['path'],
    FileRoutesByPath['/_account/sessions/']['fullPath']
  >
}
declare module './routes/password.change.index' {
  const createFileRoute: CreateFileRoute<
    '/password/change/',
    FileRoutesByPath['/password/change/']['parentRoute'],
    FileRoutesByPath['/password/change/']['id'],
    FileRoutesByPath['/password/change/']['path'],
    FileRoutesByPath['/password/change/']['fullPath']
  >
}
declare module './routes/password.recovery.index' {
  const createFileRoute: CreateFileRoute<
    '/password/recovery/',
    FileRoutesByPath['/password/recovery/']['parentRoute'],
    FileRoutesByPath['/password/recovery/']['id'],
    FileRoutesByPath['/password/recovery/']['path'],
    FileRoutesByPath['/password/recovery/']['fullPath']
  >
}

interface AccountRouteChildren {
  AccountIndexRoute: typeof AccountIndexRoute
  AccountSessionsBrowsersRoute: typeof AccountSessionsBrowsersRoute
  AccountPlanIndexRoute: typeof AccountPlanIndexRoute
  AccountSessionsIndexRoute: typeof AccountSessionsIndexRoute
}

const AccountRouteChildren: AccountRouteChildren = {
  AccountIndexRoute: AccountIndexRoute,
  AccountSessionsBrowsersRoute: AccountSessionsBrowsersRoute,
  AccountPlanIndexRoute: AccountPlanIndexRoute,
  AccountSessionsIndexRoute: AccountSessionsIndexRoute,
}

const AccountRouteWithChildren =
  AccountRoute._addFileChildren(AccountRouteChildren)

interface ResetCrossSigningRouteChildren {
  ResetCrossSigningCancelledRoute: typeof ResetCrossSigningCancelledRoute
  ResetCrossSigningSuccessRoute: typeof ResetCrossSigningSuccessRoute
  ResetCrossSigningIndexRoute: typeof ResetCrossSigningIndexRoute
}

const ResetCrossSigningRouteChildren: ResetCrossSigningRouteChildren = {
  ResetCrossSigningCancelledRoute: ResetCrossSigningCancelledRoute,
  ResetCrossSigningSuccessRoute: ResetCrossSigningSuccessRoute,
  ResetCrossSigningIndexRoute: ResetCrossSigningIndexRoute,
}

const ResetCrossSigningRouteWithChildren =
  ResetCrossSigningRoute._addFileChildren(ResetCrossSigningRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AccountRoute: AccountRouteWithChildren,
  ResetCrossSigningRoute: ResetCrossSigningRouteWithChildren,
  ClientsIdRoute: ClientsIdRoute,
  DevicesSplatRoute: DevicesSplatRoute,
  SessionsIdRoute: SessionsIdRoute,
  EmailsIdInUseRoute: EmailsIdInUseRoute,
  EmailsIdVerifyRoute: EmailsIdVerifyRoute,
  PasswordChangeSuccessRoute: PasswordChangeSuccessRoute,
  PasswordChangeIndexRoute: PasswordChangeIndexRoute,
  PasswordRecoveryIndexRoute: PasswordRecoveryIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
